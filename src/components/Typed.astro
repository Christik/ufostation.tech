---
import * as typical from 'src/lib/typical';
import { shuffleArray } from 'src/lib/content';

export interface Props {
  selector: string;
  posts: any[];
}

declare global {
  interface Window {
    typical: typeof typical;
  }
}

const { posts, selector: typedSelector } = Astro.props;
const typedPosts = posts.map(({ url, frontmatter: { title } }) => ({
  title,
  url,
}));

shuffleArray(typedPosts);
---

<style is:global>
  .typed::after {
    content: ' |';
    color: #fff;
    -webkit-animation: blink 1s infinite step-start;
    animation: blink 1s infinite step-start;
  }

  @-webkit-keyframes blink {
    50% {
      opacity: 0;
    }
  }

  @keyframes blink {
    50% {
      opacity: 0;
    }
  }
</style>
<script>
  import * as typical from 'src/lib/typical';
  window.typical = typical;
</script>
<script define:vars={{ typedSelector, typedPosts }}>
  document.addEventListener('DOMContentLoaded', function () {
    const node = document.querySelector(typedSelector);
    if (node) {
      const typePost = (post) => {
        return [
          () => {
            node.href = post.url;
          },
          post.title,
          5000,
        ];
      };

      const posts = typedPosts.map(typePost).reduce((acc, typedPost) => {
        return [...acc, ...typedPost];
      }, []);

      typical.type(node, ...posts, typical.type);
    }
    /*
    new window.Typed(typedSelector, {
      strings: typedPosts.map(
        (post) => '<a href="' + post.url + '">' + post.title + '</a>'
      )
    });
    */
  });
</script>
